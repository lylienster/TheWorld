Notes:
To run this project on a different computer
	+ Update to VS 2015 Update 3
	+ Install DotNetCore VS2015Tools Preview2 (maybe optional)
	+ Install DotNetCore SDK 1.0.0-preview2
	+ run command "dotnet ef database update" in the root folder of the project to create the database
	+ set up the environment variable for bing api key to use Bing's api
	
Install VS extensions: Web Essentials 2015.2, Web Compiler, Add New File, Open Command Line, TypeScript For VS 2015 

Shift+Alt+W to surround content with a div. (Web Essentials shortcut)

Create stylesheets to be able to reuse them across the website

Shift-F2 to use Add New File extension

li.active to select the li element that has a class named active

Use services.AddScope to do dependency injection

Use AddEnvironmentVariables to override variables in config.json. Useful for setting private information that should belong to the machine

Use Font-Awesome as an alternative to Bootstrap icons

Use Bootswatch to change to look and feel of Bootstrap templates

Use .col-xx-offset-x to offset the grid column


Entity Framework
Open comand line in the same directory as the project.json file to use "dotnet ef", or go to project.json file and press Alt+Space to open the command line here

dotnet ef
dotnet ef migrations add InitialDatabase 	// read the project (TheWorld), look for DbContext object, and create the tables  
dotnet ef database update 					// read the project, look at the migrations and update the database to the latest sets of migrations 
 
Use AutoMapper to do mapping between models 

Create environment variables for private values like api keys and passwords, so that when we check it the code to a public repository, other people won't able to see them. (Ex: Keys__BingKey for variable name)
	- Have to setup the env variables manually (or using a script) for each environment (dev, staging, live) if they use different keys.)
	
Replace DbContext with IdentityDbContect to store Identities in the Database

AngularJS
	+ Use ng-disabled="nameOfForm.$invalid" on submit button to disable button if the form is invalid (ex: <input type="submit" value="Add" ng-disabled="newTripForm.$invalid")
	+ Use ng-show="nameOfForm.nameOfElement.$error.required" to show message if required input doesn't have value (ex: <span class="text-warning" ng-show="newTripForm.name.$error.required">Name is required.</span>)

	To create an Angular directive
		+ create module and create directive for this module (ex: angular.module("simpleControls", []).directive("waitCursor", waitCursor);)
		+ implement the functionality of the directive 
			function waitCursor() {
				return {
					scope: {
						show: "=displayWhen" 				// variable passed from where the directive was consumed
					},
					templateUrl: "/views/waitCursor.html" 	// the view of the directive
				};
			};
		+ import the directive to the module that uses it (ex: angular.module("app-trips",["simpleControls"]);)
		+ import the script before the module script and use it on the view (ex: <wait-cursor display-when="vm.isBusy"></wait-cursor>)
	+ Use angular.copy to map objects from controller to scope variable (ex: angular.copy(response.data, vm.trips))
